"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[782],{49397:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u7b97\u6cd5/\u968f\u673a\u68ee\u6797","title":"\u968f\u673a\u68ee\u6797","description":"\u968f\u673a\u68ee\u6797","source":"@site/docs/docs/\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u7b97\u6cd5/\u968f\u673a\u68ee\u6797.md","sourceDirName":"\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u7b97\u6cd5","slug":"/\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u7b97\u6cd5/\u968f\u673a\u68ee\u6797","permalink":"/docs/\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u7b97\u6cd5/\u968f\u673a\u68ee\u6797","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"\u968f\u673a\u68ee\u6797"},"sidebar":"tutorialSidebar","previous":{"title":"\u51b3\u7b56\u6811","permalink":"/docs/\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u7b97\u6cd5/\u51b3\u7b56\u6811"},"next":{"title":"\u6734\u7d20\u8d1d\u53f6\u65af","permalink":"/docs/\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u7b97\u6cd5/\u6734\u7d20\u8d1d\u53f6\u65af"}}');var r=t(74848),s=t(28453);const l={sidebar_position:6,title:"\u968f\u673a\u68ee\u6797"},a=void 0,o={},c=[{value:"\u968f\u673a\u68ee\u6797",id:"\u968f\u673a\u68ee\u6797",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30",level:3},{value:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668",id:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668",level:3},{value:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406",id:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406",level:3},{value:"Gradient Boosting",id:"gradient-boosting",level:3},{value:"\u5de5\u4f5c\u539f\u7406",id:"\u5de5\u4f5c\u539f\u7406",level:4},{value:"\u7b80\u5355\u4ee3\u7801\u793a\u4f8b",id:"\u7b80\u5355\u4ee3\u7801\u793a\u4f8b",level:4},{value:"XGBoost",id:"xgboost",level:4},{value:"LightGBM",id:"lightgbm",level:4},{value:"\u68af\u5ea6\u63d0\u5347\u4e0e\u968f\u673a\u68ee\u6797\u7684\u6bd4\u8f83",id:"\u68af\u5ea6\u63d0\u5347\u4e0e\u968f\u673a\u68ee\u6797\u7684\u6bd4\u8f83",level:4}];function d(n){const e={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"\u968f\u673a\u68ee\u6797",children:"\u968f\u673a\u68ee\u6797"}),"\n",(0,r.jsx)(e.p,{children:"\u968f\u673a\u68ee\u6797\u662f\u5bf9\u51b3\u7b56\u6811\u96c6\u5408\u7684\u7279\u6709\u540d\u79f0\u3002"}),"\n",(0,r.jsx)(e.p,{children:'\u968f\u673a\u68ee\u6797\u91cc\u6211\u4eec\u6709\u591a\u4e2a\u51b3\u7b56\u6811\uff08\u6240\u4ee5\u53eb"\u68ee\u6797"\uff09\u3002'}),"\n",(0,r.jsx)(e.p,{children:"\u4f20\u7edf\u51b3\u7b56\u6811\u5f88\u5bb9\u6613\u53d7\u5230\u4e2a\u522b\u5f02\u5e38\u6570\u636e\u7684\u5f71\u54cd\u6784\u9020\u51fa\u5947\u602a\u7684\u6811\uff0c\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5047\u8bbe\u6709100\u6761\u6570\u636e\uff0c\u5176\u4e2d\u67092\u6761\u6570\u636e\u5f02\u5e38\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u751f\u6210\u51b3\u7b56\u6811\uff1a"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u5982\u679c\u8bad\u7ec3\u96c6\u4e2d\u6709 N \u79cd\u7c7b\u522b\uff0c\u5219\u6709\u91cd\u590d\u5730\u968f\u673a\u9009\u53d6 N \u4e2a\u6837\u672c\u3002\u8fd9\u4e9b\u6837\u672c\u5c06\u7ec4\u6210\u57f9\u517b\u51b3\u7b56\u6811\u7684\u8bad\u7ec3\u96c6\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["\u5982\u679c\u6709 M \u4e2a\u7279\u5f81\u53d8\u91cf\uff0c\u90a3\u4e48\u9009\u53d6\u6570",(0,r.jsx)(e.code,{children:"m << M"}),"\uff0c\u4ece\u800c\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u968f\u673a\u9009\u53d6 m \u4e2a\u7279\u5f81\u53d8\u91cf\u6765\u5206\u5272\u8be5\u8282\u70b9\u3002m \u5728\u6574\u4e2a\u68ee\u6797\u517b\u6210\u4e2d\u4fdd\u6301\u4e0d\u53d8\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u6bcf\u4e2a\u51b3\u7b56\u6811\u90fd\u6700\u5927\u7a0b\u5ea6\u4e0a\u8fdb\u884c\u5206\u5272\uff0c\u6ca1\u6709\u526a\u679d\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff1a\u6bcf\u4e00\u4e2a\u51b3\u7b56\u6811\u90fd\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5206\u7c7b\u3002\u968f\u673a\u68ee\u6797\u7b97\u6cd5\u9009\u51fa\u6295\u7968\u6700\u591a\u7684\u5206\u7c7b\u4f5c\u4e3a\u5206\u7c7b\u7ed3\u679c\u3002\u5bf9\u4e8e\u8fd92\u6761\u6570\u636e\u5f02\u5e38\u6240\u5728\u7684\u51b3\u7b56\u6811\u4f1a\u7ed9\u51fa\u9519\u8bef\u7ed3\u679c\uff0c\u6b63\u5e38\u6570\u636e\u4f1a\u7ed9\u51fa\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u5c11\u6570\u670d\u4ece\u591a\u6570\uff0c\u6700\u7ec8\u5206\u7c7b\u6b63\u786e\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u5bf9\u4e8e\u56de\u5f52\u95ee\u9898\uff1a\u6bcf\u4e00\u4e2a\u51b3\u7b56\u6811\u90fd\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u679c\uff0c\u968f\u673a\u68ee\u6797\u5bf9\u4e0d\u540c\u6811\u53d6\u5e73\u5747\u3002\u5bf9\u4e8e\u8fd92\u6761\u6570\u636e\u5f02\u5e38\u6240\u5728\u7684\u51b3\u7b56\u6811\u4f1a\u7ed9\u51fa\u504f\u5dee\u8f83\u5927\u7684\u7ed3\u679c\uff0c\u6b63\u5e38\u6570\u636e\u4f1a\u7ed9\u51fa\u504f\u5dee\u8f83\u5c0f\u7684\u7ed3\u679c\uff0c\u53d6\u5e73\u5747\u4e4b\u540e\uff0c\u6700\u7ec8\u504f\u5dee\u8f83\u5c0f\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np\n\n# \u521b\u5efa\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\nX = np.array([[1, 2], [2, 3], [2, 5], [3, 2], [3, 3], [4, 5]])  # \u7279\u5f81\ny = np.array([0, 0, 1, 0, 1, 1])  # \u76ee\u6807\u6807\u7b7e\n\n# \u521b\u5efa\u968f\u673a\u68ee\u6797\u5206\u7c7b\u5668\n'''\n\u4e00\u822c\u6765\u8bf4\uff0c\u6df1\u5ea6\u8d8a\u5927\uff0c\u62df\u5408\u6548\u679c\u8d8a\u597d,\u901f\u5ea6\u8d8a\u6162,\u5e38\u7528\u7684\u53ef\u4ee5\u53d6\u503c10\u5230100\u4e4b\u95f4\u3002\n'''\nn_estimators = 100  # \u8bbe\u7f6e\u968f\u673a\u68ee\u6797\u4e2d\u7684\u6811\u7684\u6570\u91cf\nmodel = RandomForestClassifier(n_estimators=n_estimators)\n\n# \u62df\u5408\u6a21\u578b\nmodel.fit(X, y)\n\n# \u9884\u6d4b\u65b0\u6570\u636e\u70b9\nnew_data_point = np.array([[3, 4]])  # \u8981\u9884\u6d4b\u7684\u65b0\u6570\u636e\u70b9\npredicted_class = model.predict(new_data_point)\n\nprint(\"\u9884\u6d4b\u7c7b\u522b:\", predicted_class)\n\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\u7b80\u5355\u793a\u4f8b",children:"\u7b80\u5355\u793a\u4f8b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.datasets import make_blobs\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.metrics import log_loss\n# \u968f\u673a\u6570\u79cd\u5b50\u8bbe\u4e3a0\uff0c\u524d\u9762\u6709\u8bb2\u8fc7\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u8fd0\u884c\u7ed3\u679c\u90fd\u4e00\u6837\nnp.random.seed(0)\n\n# \u968f\u673a\u751f\u62101000\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c\u5305\u542b2\u4e2a\u7279\u5f81\uff0c\u51714\u4e2a\u7c07\nX, y = make_blobs(n_samples=1000, random_state=42, cluster_std=5.0)\n\n# \u7528\u524d800\u4e2a\u6837\u672c\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u5e76\u4e14\u8fd9800\u4e2a\u6837\u672c\u4e2d\uff0c\u524d600\u4e2a\u6837\u672c\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u540e200\u4e2a\u6837\u672c\u7528\u6765\u77eb\u6b63\nX_train, y_train = X[:600], y[:600]\nX_valid, y_valid = X[600:800], y[600:800]\n\n# \u76f4\u63a5\u9009\u53d6\u524d800\u4e2a\u6837\u672c\u4f5c\u4e3a\u8bad\u7ec3\u96c6\nX_train_valid, y_train_valid = X[:800], y[:800]\n\n# \u7528\u524d800\u4e2a\u6837\u672c\u4f5c\u4e3a\u8bad\u7ec3+\u9a8c\u8bc1\u96c6\uff0c\u5269\u4e0b\u7684200\u4e2a\u6837\u672c\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\nX_test, y_test = X[800:], y[800:]\n\n# \u6811\u7684\u6570\u91cf\u4e3a25\nclf = RandomForestClassifier(n_estimators=25)\n# \u76f4\u63a5\u4f7f\u7528\u524d80%\u7684\u6570\u636e\u8bad\u7ec3\u6a21\u578b\nclf.fit(X_train_valid, y_train_valid)\n# \u540e20%\u7684\u6570\u636e\u6d4b\u8bd5\uff0c\nclf_probs = clf.predict_proba(X_test)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\u6548\u679c\u8bc4\u4f30",children:"\u6548\u679c\u8bc4\u4f30"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:'# \u7528log_loss\u6765\u8bc4\u4f30\u6a21\u578b\nscore = log_loss(y_test, clf_probs)\nprint("  %.3f " % score)\n# \u8fd9\u4e2a\u5206\u7c7b\u5668\u5bf9\u6240\u6709800\u4e2a\u8bad\u7ec3\u6570\u636e\u70b9\u90fd\u8fdb\u884c\u4e86\u8bad\u7ec3\uff0c\u90a3\u4e48\u5b83\u5bf9\u5b83\u7684\u9884\u6d4b\u8fc7\u4e8e\u81ea\u4fe1,\u5bfc\u81f4\u4e86\u8fc7\u62df\u5408\n\n# \u63a5\u4e0b\u6765\u9700\u8981\u77eb\u6b63\u8fd9\u4e2a\u5206\u7c7b\u5668\uff0c\u8ba9\u5b83\u5bf9\u81ea\u5df1\u7684\u9884\u6d4b\u4e0d\u90a3\u4e48\u81ea\u4fe1\n\n# \u4fee\u6b63\u524d\u7684\u8bef\u5dee\u8fbe\u5230\u4e861.3 \u4fee\u6b63\u540e\u7684\u6570\u636e\u8bef\u5dee\u964d\u5230\u4e86 0.534\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668",children:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:'# Train random forest classifier, calibrate on validation data and evaluate\n# on test data\n# \u4f7f\u7528\u524d60%\u7684\u6570\u636e\u8bad\u7ec3\uff0c\u4e2d20%\u7684\u6570\u636e\u6821\u51c6\uff0c\u540e20%\u7684\u6570\u636e\u6d4b\u8bd5\nclf = RandomForestClassifier(n_estimators=25)\nclf.fit(X_train, y_train)\nclf_probs = clf.predict_proba(X_test)\n# \u83b7\u53d6\u539f\u672c\u7684\u6a21\u578b\n# method="sigmoid" \u4ee3\u8868\u4f7f\u7528sigmoid\u51fd\u6570\u6765\u8fdb\u884c\u6821\u51c6\n# cv="prefit" \u4ee3\u8868\u4f7f\u7528\u9884\u5148\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u6765\u8fdb\u884c\u6821\u51c6\nsig_clf = CalibratedClassifierCV(clf, method="sigmoid", cv="prefit")\n# \u5bf9\u4e2d\u95f4\u768420%\u9884\u6d4b\u540e\u8fdb\u884c\u6982\u7387\u8c03\u8bd5\uff08\u6a21\u578b\u4f18\u5316\uff09\nsig_clf.fit(X_valid, y_valid)\n# .predict_proba(X_test) \u8fdb\u884c\u9884\u6d4b(\u4f18\u5316\u540e\u7684\u6a21\u578b\u4f7f\u7528\u65b9\u6cd5\u4e0d\u53d8)\nsig_clf_probs = sig_clf.predict_proba(X_test)\n# \u7528log_loss\u6765\u8bc4\u4f30\u6a21\u578b\nsig_score = log_loss(y_test, sig_clf_probs)\n\nprint("%.3f" % sig_score)\n# \u4fee\u6b63\u524d\u7684\u8bef\u5dee\u8fbe\u5230\u4e861.3 \u4fee\u6b63\u540e\u7684\u6570\u636e\u8bef\u5dee\u964d\u5230\u4e86 0.534\n\n\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406",children:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"# Plot changes in predicted probabilities via arrows\nplt.figure()\n# \u989c\u8272\u8868\u793a\u5b9e\u4f8b\u7684\u771f\u6b63\u7c7b(\u7ea2\u8272\uff1a1\u7c7b\uff0c\u7eff\u8272\uff1a2\u7c7b\uff0c\u84dd\u8272\uff1a3\u7c7b)\ncolors = [\"r\", \"g\", \"b\"]\nfor i in range(clf_probs.shape[0]):\n    plt.arrow(clf_probs[i, 0], clf_probs[i, 1],\n              sig_clf_probs[i, 0] - clf_probs[i, 0],\n              sig_clf_probs[i, 1] - clf_probs[i, 1],\n              color=colors[y_test[i]], head_width=1e-2)\n\n# Plot perfect predictions\nplt.plot([1.0], [0.0], 'ro', ms=20, label=\"Class 1\")\nplt.plot([0.0], [1.0], 'go', ms=20, label=\"Class 2\")\nplt.plot([0.0], [0.0], 'bo', ms=20, label=\"Class 3\")\n\n# Plot boundaries of unit simplex\nplt.plot([0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], 'k', label=\"Simplex\")\n\n# Annotate points on the simplex\nplt.annotate(r'($\\frac{1}{3}$, $\\frac{1}{3}$, $\\frac{1}{3}$)',\n             xy=(1.0/3, 1.0/3), xytext=(1.0/3, .23), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.plot([1.0/3], [1.0/3], 'ko', ms=5)\nplt.annotate(r'($\\frac{1}{2}$, $0$, $\\frac{1}{2}$)',\n             xy=(.5, .0), xytext=(.5, .1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($0$, $\\frac{1}{2}$, $\\frac{1}{2}$)',\n             xy=(.0, .5), xytext=(.1, .5), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($\\frac{1}{2}$, $\\frac{1}{2}$, $0$)',\n             xy=(.5, .5), xytext=(.6, .6), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($0$, $0$, $1$)',\n             xy=(0, 0), xytext=(.1, .1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($1$, $0$, $0$)',\n             xy=(1, 0), xytext=(1, .1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($0$, $1$, $0$)',\n             xy=(0, 1), xytext=(.1, 1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\n# Add grid\nplt.grid(False)\nfor x in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:\n    plt.plot([0, x], [x, 0], 'k', alpha=0.2)\n    plt.plot([0, 0 + (1-x)/2], [x, x + (1-x)/2], 'k', alpha=0.2)\n    plt.plot([x, x + (1-x)/2], [0, 0 + (1-x)/2], 'k', alpha=0.2)\n\nplt.title(\"Change of predicted probabilities after sigmoid calibration\")\nplt.xlabel(\"Probability class 1\")\nplt.ylabel(\"Probability class 2\")\nplt.xlim(-0.05, 1.05)\nplt.ylim(-0.05, 1.05)\nplt.legend(loc=\"best\")\n\nprint(\"Log-loss of\")\nprint(\" * uncalibrated classifier trained on 800 datapoints: %.3f \"\n      % score)\nprint(\" * classifier trained on 600 datapoints and calibrated on \"\n      \"200 datapoint: %.3f\" % sig_score)\n\n# Illustrate calibrator\nplt.figure()\n# generate grid over 2-simplex\np1d = np.linspace(0, 1, 20)\np0, p1 = np.meshgrid(p1d, p1d)\np2 = 1 - p0 - p1\np = np.c_[p0.ravel(), p1.ravel(), p2.ravel()]\np = p[p[:, 2] >= 0]\n\ncalibrated_classifier = sig_clf.calibrated_classifiers_[0]\nprediction = np.vstack([calibrator.predict(this_p)\n                        for calibrator, this_p in\n                        zip(calibrated_classifier.calibrators, p.T)]).T\nprediction /= prediction.sum(axis=1)[:, None]\n\n# Plot modifications of calibrator\nfor i in range(prediction.shape[0]):\n    plt.arrow(p[i, 0], p[i, 1],\n              prediction[i, 0] - p[i, 0], prediction[i, 1] - p[i, 1],\n              head_width=1e-2, color=colors[np.argmax(p[i])])\n# Plot boundaries of unit simplex\nplt.plot([0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], 'k', label=\"Simplex\")\n\nplt.grid(False)\nfor x in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:\n    plt.plot([0, x], [x, 0], 'k', alpha=0.2)\n    plt.plot([0, 0 + (1-x)/2], [x, x + (1-x)/2], 'k', alpha=0.2)\n    plt.plot([x, x + (1-x)/2], [0, 0 + (1-x)/2], 'k', alpha=0.2)\n\n # sigmoid\u6821\u51c6\u5668\u56fe\u793a\nplt.title(\"sigmoid \")\nplt.xlabel(\"Probability class 1\")\nplt.ylabel(\"Probability class 2\")\n# .xlim\u662f\u8bbe\u7f6ex\u8f74\u7684\u8303\u56f4\nplt.xlim(-0.05, 1.05)\n# .ylim\u662f\u8bbe\u7f6ey\u8f74\u7684\u8303\u56f4\nplt.ylim(-0.05, 1.05)\n\nplt.show()\n"})}),"\n",(0,r.jsx)(e.h3,{id:"gradient-boosting",children:"Gradient Boosting"}),"\n",(0,r.jsx)(e.p,{children:"\u68af\u5ea6\u63d0\u5347\uff08Gradient Boosting\uff09\u662f\u53e6\u4e00\u79cd\u5f3a\u5927\u7684\u96c6\u6210\u5b66\u4e60\u65b9\u6cd5\uff0c\u4e0e\u968f\u673a\u68ee\u6797\u76f8\u4f3c\uff0c\u5b83\u4e5f\u662f\u57fa\u4e8e\u51b3\u7b56\u6811\u7684\u96c6\u6210\uff0c\u4f46\u6784\u5efa\u65b9\u5f0f\u4e0d\u540c\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u68af\u5ea6\u63d0\u5347\u7684\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u8fed\u4ee3\u5730\u8bad\u7ec3\u4e00\u7cfb\u5217\u5f31\u5b66\u4e60\u5668\uff08\u901a\u5e38\u662f\u6d45\u5c42\u51b3\u7b56\u6811\uff09\uff0c\u6bcf\u4e2a\u65b0\u7684\u5b66\u4e60\u5668\u90fd\u8bd5\u56fe\u7ea0\u6b63\u524d\u9762\u5b66\u4e60\u5668\u7684\u9519\u8bef\u3002\u4e0e\u968f\u673a\u68ee\u6797\u5e76\u884c\u5efa\u7acb\u72ec\u7acb\u6811\u4e0d\u540c\uff0c\u68af\u5ea6\u63d0\u5347\u662f\u987a\u5e8f\u5efa\u7acb\u6811\uff0c\u6bcf\u68f5\u6811\u90fd\u4f9d\u8d56\u4e8e\u4e4b\u524d\u6811\u7684\u7ed3\u679c\u3002"}),"\n",(0,r.jsx)(e.h4,{id:"\u5de5\u4f5c\u539f\u7406",children:"\u5de5\u4f5c\u539f\u7406"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\uff08\u4f8b\u5982\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u51b3\u7b56\u6811\uff09\u5f00\u59cb"}),"\n",(0,r.jsx)(e.li,{children:"\u8ba1\u7b97\u5f53\u524d\u6a21\u578b\u7684\u6b8b\u5dee\uff08\u5b9e\u9645\u503c\u4e0e\u9884\u6d4b\u503c\u7684\u5dee\uff09"}),"\n",(0,r.jsx)(e.li,{children:"\u8bad\u7ec3\u4e00\u4e2a\u65b0\u7684\u5f31\u5b66\u4e60\u5668\u6765\u9884\u6d4b\u8fd9\u4e9b\u6b8b\u5dee"}),"\n",(0,r.jsx)(e.li,{children:"\u5c06\u65b0\u5b66\u4e60\u5668\u6dfb\u52a0\u5230\u6a21\u578b\u4e2d\uff08\u901a\u5e38\u4e58\u4ee5\u4e00\u4e2a\u5b66\u4e60\u7387\uff09"}),"\n",(0,r.jsx)(e.li,{children:"\u91cd\u590d\u6b65\u9aa42-4\uff0c\u76f4\u5230\u8fbe\u5230\u6307\u5b9a\u7684\u8fed\u4ee3\u6b21\u6570\u6216\u8bef\u5dee\u4e0d\u518d\u663e\u8457\u51cf\u5c11"}),"\n"]}),"\n",(0,r.jsxs)(e.admonition,{type:"info",children:[(0,r.jsx)(e.p,{children:"\u4ec0\u4e48\u662f\u6b8b\u5dee\uff1f"}),(0,r.jsx)(e.p,{children:"\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u56de\u5f52\u95ee\u9898\uff1a\n\u771f\u5b9e\u503c\uff1a[10, 20, 30, 40]"}),(0,r.jsxs)(e.p,{children:["\u7b2c\u4e00\u68f5\u6811\u9884\u6d4b\u7ed3\u679c\uff1a[8, 18, 28, 38]\n\u5219\u6b8b\u5dee\u4e3a",(0,r.jsx)(e.strong,{children:"\u771f\u5b9e\u503c"}),"-",(0,r.jsx)(e.strong,{children:"\u7b2c\u4e00\u68f5\u6811\u9884\u6d4b\u7ed3\u679c"}),"\n[2, 2, 2, 2]"]}),(0,r.jsx)(e.p,{children:"\u7b2c\u4e8c\u68f5\u6811\u4f1a\u5c1d\u8bd5\u9884\u6d4b\u8fd9\u4e2a\u6b8b\u5dee[2, 2, 2, 2]"}),(0,r.jsx)(e.p,{children:"\u5982\u679c\u7b2c\u4e8c\u68f5\u6811\u9884\u6d4b\u7ed3\u679c\u4e3a[1.8, 1.8, 1.8, 1.8]"}),(0,r.jsx)(e.p,{children:"\u5219\u65b0\u7684\u6b8b\u5dee\u4e3a\uff1a[0.2, 0.2, 0.2, 0.2]"}),(0,r.jsx)(e.p,{children:"\u6700\u7ec8\u9884\u6d4b = \u7b2c\u4e00\u68f5\u6811\u9884\u6d4b + \u7b2c\u4e8c\u68f5\u6811\u9884\u6d4b = [9.8, 19.8, 29.8, 39.8]"}),(0,r.jsx)(e.p,{children:"\u6700\u7ec8\u9884\u6d4b\u66f4\u52a0\u63a5\u8fd1\u771f\u5b9e\u503c\uff0c\u635f\u5931\u66f4\u5c0f\u3002"})]}),"\n",(0,r.jsx)(e.h4,{id:"\u7b80\u5355\u4ee3\u7801\u793a\u4f8b",children:"\u7b80\u5355\u4ee3\u7801\u793a\u4f8b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"from sklearn.ensemble import GradientBoostingClassifier\nimport numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\n\n# \u521b\u5efa\u6570\u636e\u96c6\nX, y = make_classification(n_samples=1000, n_features=10, n_informative=5, \n                          n_redundant=2, random_state=42)\n\n# \u5206\u5272\u6570\u636e\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# \u521b\u5efa\u68af\u5ea6\u63d0\u5347\u6a21\u578b\n'''\n\u4e3b\u8981\u53c2\u6570\u8bf4\u660e\uff1a\nn_estimators: \u5f31\u5b66\u4e60\u5668\u7684\u6570\u91cf\nlearning_rate: \u5b66\u4e60\u7387\uff0c\u63a7\u5236\u6bcf\u4e2a\u5f31\u5b66\u4e60\u5668\u7684\u8d21\u732e\nmax_depth: \u51b3\u7b56\u6811\u7684\u6700\u5927\u6df1\u5ea6\nsubsample: \u7528\u4e8e\u62df\u5408\u57fa\u5b66\u4e60\u5668\u7684\u6837\u672c\u6bd4\u4f8b\uff0c<1.0\u8868\u793a\u91c7\u7528\u968f\u673a\u68af\u5ea6\u63d0\u5347\n'''\ngbm = GradientBoostingClassifier(n_estimators=100, \n                                learning_rate=0.1, \n                                max_depth=3, \n                                subsample=0.8,\n                                random_state=42)\n\n# \u8bad\u7ec3\u6a21\u578b\ngbm.fit(X_train, y_train)\n\n# \u8bc4\u4f30\u6a21\u578b\naccuracy = gbm.score(X_test, y_test)\nprint(f\"\u6a21\u578b\u51c6\u786e\u7387: {accuracy:.4f}\")\n\n# \u8fdb\u884c\u9884\u6d4b\ny_pred = gbm.predict(X_test)\ny_proba = gbm.predict_proba(X_test)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"xgboost",children:"XGBoost"}),"\n",(0,r.jsx)(e.p,{children:"XGBoost\uff08eXtreme Gradient Boosting\uff09\u662f\u68af\u5ea6\u63d0\u5347\u7684\u9ad8\u6548\u5b9e\u73b0\uff0c\u5177\u6709\u4ee5\u4e0b\u4f18\u52bf\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u52a0\u5165\u4e86\u6b63\u5219\u5316\u9879\u9632\u6b62\u8fc7\u62df\u5408"}),"\n",(0,r.jsx)(e.li,{children:"\u652f\u6301\u5e76\u884c\u8ba1\u7b97"}),"\n",(0,r.jsx)(e.li,{children:"\u53ef\u4ee5\u5904\u7406\u7f3a\u5931\u503c"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u7f6e\u4ea4\u53c9\u9a8c\u8bc1"}),"\n",(0,r.jsx)(e.li,{children:"\u63d0\u4f9b\u6811\u526a\u679d\u673a\u5236"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"import xgboost as xgb\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\n\n# \u521b\u5efa\u6570\u636e\u96c6\nX, y = make_classification(n_samples=1000, n_features=10, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# \u521b\u5efaDMatrix\u5bf9\u8c61\uff08XGBoost\u7684\u6570\u636e\u683c\u5f0f\uff09\ndtrain = xgb.DMatrix(X_train, label=y_train)\ndtest = xgb.DMatrix(X_test, label=y_test)\n\n# \u8bbe\u7f6e\u53c2\u6570\nparams = {\n    'objective': 'binary:logistic',  # \u76ee\u6807\u51fd\u6570\n    'max_depth': 3,                  # \u6811\u7684\u6700\u5927\u6df1\u5ea6\n    'eta': 0.1,                      # \u5b66\u4e60\u7387\n    'subsample': 0.8,                # \u6837\u672c\u91c7\u6837\u6bd4\u4f8b\n    'colsample_bytree': 0.8,         # \u7279\u5f81\u91c7\u6837\u6bd4\u4f8b\n    'eval_metric': 'logloss'         # \u8bc4\u4f30\u6307\u6807\n}\n\n# \u8bad\u7ec3\u6a21\u578b\nnum_rounds = 100\nmodel = xgb.train(params, dtrain, num_rounds)\n\n# \u9884\u6d4b\npreds = model.predict(dtest)\npred_labels = [1 if p > 0.5 else 0 for p in preds]\naccuracy = sum(pred_labels == y_test) / len(y_test)\nprint(f\"XGBoost\u6a21\u578b\u51c6\u786e\u7387: {accuracy:.4f}\")\n"})}),"\n",(0,r.jsx)(e.h4,{id:"lightgbm",children:"LightGBM"}),"\n",(0,r.jsx)(e.p,{children:"LightGBM\u662f\u53e6\u4e00\u79cd\u9ad8\u6548\u7684\u68af\u5ea6\u63d0\u5347\u5b9e\u73b0\uff0c\u4e13\u6ce8\u4e8e\u63d0\u9ad8\u8bad\u7ec3\u901f\u5ea6\u548c\u5185\u5b58\u6548\u7387\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u4f7f\u7528\u57fa\u4e8e\u76f4\u65b9\u56fe\u7684\u7b97\u6cd5\u52a0\u901f\u8bad\u7ec3"}),"\n",(0,r.jsx)(e.li,{children:"\u91c7\u7528\u53f6\u5b50\u4f18\u5148\u7684\u751f\u957f\u7b56\u7565"}),"\n",(0,r.jsx)(e.li,{children:"\u652f\u6301\u7c7b\u522b\u7279\u5f81\u7684\u76f4\u63a5\u5904\u7406"}),"\n",(0,r.jsx)(e.li,{children:"\u5bf9\u5927\u89c4\u6a21\u6570\u636e\u548c\u9ad8\u7ef4\u7279\u5f81\u53cb\u597d"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"import lightgbm as lgb\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# \u521b\u5efa\u6570\u636e\u96c6\nX, y = make_classification(n_samples=1000, n_features=10, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# \u521b\u5efa\u6570\u636e\u96c6\u683c\u5f0f\ntrain_data = lgb.Dataset(X_train, label=y_train)\n\n# \u8bbe\u7f6e\u53c2\u6570\nparams = {\n    'objective': 'binary',         # \u76ee\u6807\u51fd\u6570\n    'metric': 'binary_logloss',    # \u8bc4\u4f30\u6307\u6807\n    'max_depth': 3,                # \u6811\u7684\u6700\u5927\u6df1\u5ea6\n    'learning_rate': 0.1,          # \u5b66\u4e60\u7387\n    'feature_fraction': 0.8,       # \u7279\u5f81\u91c7\u6837\u6bd4\u4f8b\n    'bagging_fraction': 0.8,       # \u6837\u672c\u91c7\u6837\u6bd4\u4f8b\n    'bagging_freq': 5              # \u6837\u672c\u91c7\u6837\u9891\u7387\n}\n\n# \u8bad\u7ec3\u6a21\u578b\nnum_rounds = 100\nmodel = lgb.train(params, train_data, num_rounds)\n\n# \u9884\u6d4b\ny_pred_proba = model.predict(X_test)\ny_pred = [1 if p > 0.5 else 0 for p in y_pred_proba]\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"LightGBM\u6a21\u578b\u51c6\u786e\u7387: {accuracy:.4f}\")\n"})}),"\n",(0,r.jsx)(e.h4,{id:"\u68af\u5ea6\u63d0\u5347\u4e0e\u968f\u673a\u68ee\u6797\u7684\u6bd4\u8f83",children:"\u68af\u5ea6\u63d0\u5347\u4e0e\u968f\u673a\u68ee\u6797\u7684\u6bd4\u8f83"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"\u7279\u6027"}),(0,r.jsx)(e.th,{children:"\u68af\u5ea6\u63d0\u5347"}),(0,r.jsx)(e.th,{children:"\u968f\u673a\u68ee\u6797"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\u8bad\u7ec3\u65b9\u5f0f"}),(0,r.jsx)(e.td,{children:"\u987a\u5e8f\uff08\u6bcf\u68f5\u6811\u4f9d\u8d56\u524d\u9762\u7684\u6811\uff09"}),(0,r.jsx)(e.td,{children:"\u5e76\u884c\uff08\u6811\u72ec\u7acb\u8bad\u7ec3\uff09"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\u5bf9\u8fc7\u62df\u5408\u7684\u654f\u611f\u6027"}),(0,r.jsx)(e.td,{children:"\u8f83\u9ad8"}),(0,r.jsx)(e.td,{children:"\u8f83\u4f4e"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\u53c2\u6570\u8c03\u4f18\u96be\u5ea6"}),(0,r.jsx)(e.td,{children:"\u8f83\u9ad8"}),(0,r.jsx)(e.td,{children:"\u8f83\u4f4e"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\u5904\u7406\u5927\u578b\u6570\u636e\u96c6"}),(0,r.jsx)(e.td,{children:"\u53ef\u80fd\u8f83\u6162"}),(0,r.jsx)(e.td,{children:"\u8f83\u5feb\uff08\u53ef\u5e76\u884c\uff09"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\u9884\u6d4b\u6027\u80fd"}),(0,r.jsx)(e.td,{children:"\u901a\u5e38\u66f4\u9ad8\uff08\u5408\u7406\u8c03\u53c2\u540e\uff09"}),(0,r.jsx)(e.td,{children:"\u5f88\u597d\u4f46\u901a\u5e38\u4f4e\u4e8e\u68af\u5ea6\u63d0\u5347"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\u6a21\u578b\u89e3\u91ca\u6027"}),(0,r.jsx)(e.td,{children:"\u8f83\u4f4e"}),(0,r.jsx)(e.td,{children:"\u4e2d\u7b49"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\u5bf9\u5f02\u5e38\u503c\u7684\u654f\u611f\u6027"}),(0,r.jsx)(e.td,{children:"\u8f83\u9ad8"}),(0,r.jsx)(e.td,{children:"\u8f83\u4f4e"})]})]})]})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function l(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);