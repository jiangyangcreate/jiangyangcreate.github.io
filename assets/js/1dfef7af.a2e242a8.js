"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[2647],{96829:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"\u95f2\u6765\u65e0\u4e8b/ROS 2/\u7ec3\u4e60","title":"\u7ec3\u4e60","description":"\u7ec3\u4e60","source":"@site/docs/docs/\u95f2\u6765\u65e0\u4e8b/ROS 2/\u7ec3\u4e60.md","sourceDirName":"\u95f2\u6765\u65e0\u4e8b/ROS 2","slug":"/\u95f2\u6765\u65e0\u4e8b/ROS 2/\u7ec3\u4e60","permalink":"/docs/\u95f2\u6765\u65e0\u4e8b/ROS 2/\u7ec3\u4e60","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u865a\u62df\u4eff\u771f","permalink":"/docs/\u95f2\u6765\u65e0\u4e8b/ROS 2/\u865a\u62df\u4eff\u771f"}}');var a=t(74848),i=t(28453);const s={},o=void 0,m={},d=[{value:"\u7ec3\u4e60",id:"\u7ec3\u4e60",level:2},{value:"\u8c03\u7528\u540c\u7f51\u6bb5\u7684\u6444\u50cf\u5934",id:"\u8c03\u7528\u540c\u7f51\u6bb5\u7684\u6444\u50cf\u5934",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\u7ec3\u4e60",children:"\u7ec3\u4e60"}),"\n",(0,a.jsx)(n.p,{children:"\u4fee\u6539\u4e0b\u9762\u7684\u4ee3\u7801\u3002\u5c1d\u8bd5\u4f20\u5165\u4e0d\u540c\u7684\u53c2\u6570\uff0c\u5c06\u56fe\u7247\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406\u3002"}),"\n",(0,a.jsx)(n.h3,{id:"\u8c03\u7528\u540c\u7f51\u6bb5\u7684\u6444\u50cf\u5934",children:"\u8c03\u7528\u540c\u7f51\u6bb5\u7684\u6444\u50cf\u5934"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="sender.py"',children:"import os\nfrom importlib import import_module\nfrom flask import Flask, render_template, Response,render_template_string\nfrom io import BytesIO\nimport cv2\nfrom PIL import ImageGrab, Image\nimport time\nimport threading\ntry:\n    from greenlet import getcurrent as get_ident\nexcept ImportError:\n    try:\n        from thread import get_ident\n    except ImportError:\n        from _thread import get_ident\n\n\nclass CameraEvent(object):\n    def __init__(self):\n        self.events = {}\n\n    def wait(self):\n        ident = get_ident()\n        if ident not in self.events:\n            self.events[ident] = [threading.Event(), time.time()]\n        return self.events[ident][0].wait()\n\n    def set(self):\n        now = time.time()\n        remove = None\n        for ident, event in self.events.items():\n            if not event[0].isSet():\n                event[0].set()\n                event[1] = now\n            else:\n                if now - event[1] > 5:\n                    remove = ident\n        if remove:\n            del self.events[remove]\n\n    def clear(self):\n        self.events[get_ident()][0].clear()\n\n\nclass BaseCamera(object):\n    thread = None\n    frame = None\n    last_access = 0\n    event = CameraEvent()\n\n    def __init__(self):\n        if BaseCamera.thread is None:\n            BaseCamera.last_access = time.time()\n\n            BaseCamera.thread = threading.Thread(target=self._thread)\n            BaseCamera.thread.start()\n\n            while self.get_frame() is None:\n                time.sleep(0)\n\n    def get_frame(self):\n        BaseCamera.last_access = time.time()\n\n        BaseCamera.event.wait()\n        BaseCamera.event.clear()\n\n        return BaseCamera.frame\n\n    @staticmethod\n    def frames():\n        raise RuntimeError('Must be implemented by subclasses.')\n\n    @classmethod\n    def _thread(cls):\n        print('Starting camera thread.')\n        frames_iterator = cls.frames()\n        for frame in frames_iterator:\n            BaseCamera.frame = frame\n            BaseCamera.event.set()\n            time.sleep(0)\n            if time.time() - BaseCamera.last_access > 10:\n                frames_iterator.close()\n                print('Stopping camera thread due to inactivity.')\n                break\n        BaseCamera.thread = None\n\n\n\nclass Camera(BaseCamera):\n    video_source = 0\n\n    @staticmethod\n    def set_video_source(source):\n        Camera.video_source = source\n\n    @staticmethod\n    def frames():\n        camera = cv2.VideoCapture(Camera.video_source)\n        if not camera.isOpened():\n            raise RuntimeError('Error')\n\n        while True:\n            image = ImageGrab.grab()  # \u83b7\u53d6\u5c4f\u5e55\u6570\u636e\n            # w, h = image.size\n            image = image.resize((1366, 750))  # \u56fe\u7247\u7f29\u653e\n            output_buffer = BytesIO()  # \u521b\u5efa\u4e8c\u8fdb\u5236\u5bf9\u8c61\n            image.save(output_buffer, format='JPEG', quality=100)  # quality\u63d0\u5347\u56fe\u7247\u5206\u8fa8\u7387\n            frame = output_buffer.getvalue()  # \u83b7\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\n            yield frame  # \u751f\u6210\u5668\u8fd4\u56de\u4e00\u5f20\u56fe\u7247\u7684\u4e8c\u8fdb\u5236\u6570\u636e\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    \"\"\"\n    \u89c6\u56fe\u51fd\u6570\n    :return:\n    \"\"\"\n    return render_template_string('''<html>\n\n<head>\n    <title>\u5c4f\u5e55\u5171\u4eab</title>\n</head>\n\n<body>\n    <img src=\"{{ url_for('video_feed') }}\">\n</body>\n\n</html>''')\n\n\ndef gen(camera):\n    \"\"\"\n    \u6d41\u5a92\u4f53\u53d1\u751f\u5668\n    \"\"\"\n    while True:\n        frame = camera.get_frame()\n\n        yield (b'--frame\\r\\n'\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\n\n\n@app.route('/video_feed')\ndef video_feed():\n    \"\"\"\u6d41\u5a92\u4f53\u6570\u636e\"\"\"\n    return Response(gen(Camera()),\n                    mimetype='multipart/x-mixed-replace; boundary=frame')\n\n\nif __name__ == '__main__':\n    ip_host = '127.0.0.1'# \u672c\u673aip\u5730\u5740\n    ip_host2 = '0.0.0.0'# \u5185\u7f51ip\u5730\u5740\n    app.run(threaded=True, host=ip_host2, port=80)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="processing.py"',children:'import cv2\n\nurl_path = "http://192.168.7.70/video_feed"\n\ncap = cv2.VideoCapture(url_path)\n\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break\n    cv2.imshow("frame", frame)\n    cv2.waitKey(1)\n\ncap.release()\ncv2.destroyAllWindows()\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(96540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);